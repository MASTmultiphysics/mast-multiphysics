name: MAST (v2) w/ libMesh-1.5.1.deb (Ubuntu 20.04)

on:
  push:
    branches: 
    paths:
      - ".github/workflows/libmesh_v1.5.1_ubuntu20.04.yml"
  pull_request:
    branches: 
    paths:
      - ".github/workflows/libmesh_v1.5.1_ubuntu20.04.yml"

env:
  MY_WORK_PATH: ${{ github.workspace }}/work
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    # Print out some useful diagnostic info about the job/environment.
    - name: Diagnostic info
      run: |
        echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
        echo "Run #${GITHUB_RUN_NUMBER}"
        echo "Run ID: ${GITHUB_RUN_ID}"
        echo "Testing: ${GITHUB_REPOSITORY}"
        echo "Triggered by (GITHUB_EVENT_NAME): ${GITHUB_EVENT_NAME}"
        echo "Initiated by (GITHUB_ACTOR): ${GITHUB_ACTOR}"

    # Update packages fromt apt repos.
    - name: Install APT dependencies
      run: |
        sudo apt-get update
        sudo apt-get -qq install -y \
          build-essential gfortran wget less m4 git cmake \
          python3-all python3-all-dev python3-all-dbg \
          openmpi-bin libopenmpi-dev python3-mpi4py python3-mpi4py-dbg \
          petsc-dev python3-petsc4py \
          slepc-dev python3-slepc4py \
          libparpack2-dev \
          libmetis-dev \
          libnetcdf-dev \
          libboost-all-dev \
          libeigen3-dev \
          libnlopt-dev \
          libadolc-dev \
          doxygen graphviz rsync
    
    - name: Setup working directory & get libMesh binary
      run: |
        mkdir ${MY_WORK_PATH}
        cd ${MY_WORK_PATH}
        wget -nv "https://github.com/MASTmultiphysics/mast-ci-packages/releases/download/gha-ubuntu20.04/libmesh-1.5.1-1.deb"
        sudo apt install "./libmesh-1.5.1-1.deb"

  
    - name: Configure CMake
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: | 
        mkdir ${GITHUB_WORKSPACE}/build_dbg
        cd ${GITHUB_WORKSPACE}/build_dbg
        cmake .. \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_INSTALL_PREFIX="${GITHUB_WORKSPACE}/mast" \
          -DCMAKE_C_COMPILER=mpicc \
          -DCMAKE_CXX_COMPILER=mpic++ \
          -DCMAKE_Fortran_COMPILER=mpifort \
          -DlibMesh_DIR=/usr/local \
          -DPETSc_DIR=/usr/lib/petscdir/petsc3.12/x86_64-linux-gnu-real \
          -DSLEPc_DIR=/usr/lib/slepcdir/slepc3.12/x86_64-linux-gnu-real \
          -DEIGEN3_ROOT=/usr/include/eigen3 \
          -DPython3_DIR=/usr \
          -DBOOST_ROOT=/usr \
          -DBUILD_DOC=ON \
          -DENABLE_DOT=OFF \
          -DENABLE_GCMMA=OFF \
          -DENABLE_SNOPT=OFF \
          -DENABLE_NASTRANIO=OFF \
          -DENABLE_CYTHON=OFF
    #    cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}/build_dbg
        make -j 1
        make install
    #   # Build your program with the given configuration
    #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.  
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}
      
