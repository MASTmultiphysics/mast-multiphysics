name: Linux (Ubuntu)

on:
  push:
    branches: 
    paths:
      - ".github/workflows/linux_ubuntu.yml"
  pull_request:
    branches: 
    paths:
      - ".github/workflows/linux_ubuntu.yml"

env:
  MY_WORK_PATH: ${{ github.workspace }}/work
  MY_OS_TYPE: Ubuntu
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  #BUILD_TYPE: Release

jobs:
  build_and_test:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        libmesh: [1.5.1] 
        build: [Debug, Release]

    runs-on: ${{ matrix.os }}

    env:
      MY_OS: ${{ matrix.os }}
      MY_LIBMESH_VERSION: ${{ matrix.libmesh }}
      MY_CMAKE_BUILD_TYPE: ${{ matrix.build }}

    steps:
    - name: Clone repository
      uses: actions/checkout@v2

    # Print out some useful diagnostic info about the job/environment.
    - name: Diagnostic info
      run: |
        echo "MY_OS_TYPE: ${MY_OS_TYPE}"
        echo "MY_OS: ${MY_OS}"
        echo "MY_WORK_PATH: ${MY_WORK_PATH}"
        echo "MY_LIBMESH_VERSION: ${MY_LIBMESH_VERSION}"
        echo "MY_CMAKE_BUILD_TYPE: ${MY_CMAKE_BUILD_TYPE}"
        echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
        echo "Run #${GITHUB_RUN_NUMBER}"
        echo "Run ID: ${GITHUB_RUN_ID}"
        echo "Testing: ${GITHUB_REPOSITORY}"
        echo "Triggered by (GITHUB_EVENT_NAME): ${GITHUB_EVENT_NAME}"
        echo "Initiated by (GITHUB_ACTOR): ${GITHUB_ACTOR}"

    - name: Install dependencies
      run: ci/build_dependencies.sh
  
    - name: Setup working directory & get libMesh binary
      run: |
        mkdir "${MY_WORK_PATH}"
        ci/get_libmesh.sh
  
    - name: Configure CMake
      run: |
        mkdir ${{ github.workspace }}/build
        cd ${{ github.workspace }}/build
        ${{ github.workspace }}/ci/configure_mast.sh

    - name: Build/install MAST
      run: |
        cd ${{ github.workspace }}/build
        make -j 2
        make install

    # - name: Unit tests
    #   cd ${{ github.workspace }}/build/tests
    #   ctest --force-new-ctest-process --output-on-failure --timeout 10
    #   run: |
    #     cd ${GITHUB_WORKSPACE}/build_dbg
    #     make -j 1
    #     make install
    # #   # Build your program with the given configuration
    # #   run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    # # - name: Test
    # #   working-directory: ${{github.workspace}}/build
    # #   # Execute tests defined by the CMake configuration.  
    # #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    # #   run: ctest -C ${{env.BUILD_TYPE}}
      
